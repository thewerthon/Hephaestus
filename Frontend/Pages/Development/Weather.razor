<<<<<<<< HEAD:Frontend/Pages/Development/Weather.razor
﻿@page "/weather"
@namespace Hephaestus.Frontend.Pages
@inject HttpClient Http
========
﻿@page "/dev/weather"
@inject HttpClient Http
@using Architect.SideModules.Development.Models
>>>>>>>> main:Frontend/SideModules/Development/Pages/Weather.razor

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>
<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null) {
	<p><em>Loading...</em></p>
} else {
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts) {
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {

	private WeatherForecast[]? forecasts;

	protected override async Task OnInitializedAsync() {
		try {
<<<<<<<< HEAD:Frontend/Pages/Development/Weather.razor
			forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("odata/weatherforecasts");
========
			forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/dev/weatherforecasts");
>>>>>>>> main:Frontend/SideModules/Development/Pages/Weather.razor
		} catch (AccessTokenNotAvailableException exception) {
			exception.Redirect();
		}
	}

}