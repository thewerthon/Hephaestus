@page "/authentication/{action}"
@layout LoginLayout
@attribute [AllowAnonymous]
@namespace Hephaestus.Frontend.Pages

<PageTitle>@(AppMenu["0100"])</PageTitle>

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="LoginSucceeded" OnLogOutSucceeded="LogoutSucceeded">

	<LoggingIn>
		<p>@AppText["0040"]</p>
	</LoggingIn>

	<CompletingLoggingIn>
		<p>@AppText["0041"]</p>
	</CompletingLoggingIn>

	<LogInFailed>
		<RadzenButton Text="@AppText["0042"]" Click="@DoLogin" />
		<p style="padding-top:10px">@AppText["0043"]</p>
	</LogInFailed>

	<LogOut>
		<p>@AppText["0044"]</p>
	</LogOut>

	<CompletingLogOut>
		<p>@AppText["0045"]</p>
	</CompletingLogOut>

	<LogOutFailed>
		<RadzenButton Text="@AppText["0046"]" Click="@DoLogin" />
		<p style="padding-top:10px">@AppText["0047"]</p>
	</LogOutFailed>

	<LogOutSucceeded>
		<RadzenButton Text="@AppText["0048"]" Click="@DoLogin" />
		<p style="padding-top:10px">@AppText["0049"]</p>
	</LogOutSucceeded>

</RemoteAuthenticatorView>

@code {

	[Parameter]
	public string? Action { get; set; }
	private string returnPath = string.Empty;

	protected override async Task OnInitializedAsync() {
		returnPath = await SessionStorage.GetItemAsStringAsync("ReturnPath") ?? AppPath["0200"].Value.Replace("/", string.Empty);
	}

	private void LoginSucceeded(RemoteAuthenticationState state) {
		state.ReturnUrl = returnPath;
	}

	private async Task LogoutSucceeded() {
		await UserService.ClearLocalUserAsync(true, true, true);
	}

	private void DoLogin() {
		NavigationManager.NavigateToLogin("authentication/login");
	}

}