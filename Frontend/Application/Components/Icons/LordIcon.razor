@namespace Frontend.Application.Components
@inherits Microsoft.AspNetCore.Components.ComponentBase

<div class="lord-icon-container">
	<lord-icon src=@("lordicon" + @Icon) state="@State" morph="@Morph" trigger="@Anim" animtrigger="@Trigger" intro="@Intro" introtrigger="@IntroTrigger" outro="@Outro" outrotrigger="@OutroTrigger" repeats="@Repeats" delay="@Delay" wait="@Wait" loading="@Loading" stroke="@Stroke" style="width:@Size;height:@Size;" target="@Target" title="@Title" id="@Id" class="lord-icon" />
</div>

@code {

	/// <summary>
	/// Path to icon's json file.
	/// </summary>
	[Parameter, EditorRequired]
	public string Icon { get; set; } = string.Empty;

	/// <summary>
	/// The state animation name.
	/// Only apply to 'state' and 'loop' animations.
	/// </summary>
	[Parameter]
	public string State { get; set; } = "default";

	/// <summary>
	/// The morph animation name.
	/// Only apply to 'morphs', 'boomerang' and 'looprang' animations.
	/// </summary>
	[Parameter]
	public string Morph { get; set; } = "none";

	/// <summary>
	/// The animation type.
	/// Accepts 'state', 'loop', 'morph', 'morphin', 'morphout', 'boomerang' or 'looprang'.
	/// Defaults to 'state' if using state and defaults to 'morph' if using morph.
	/// </summary>
	[Parameter]
	public string Anim { get; set; } = string.Empty;

	/// <summary>
	/// The animation trigger.
	/// Accepts 'none', 'auto', 'hover', 'click'.
	/// Can mix them as 'auto-hover-click'.
	/// Defaults to 'click' if using state and defaults to 'hover' if using morph.
	/// </summary>
	[Parameter]
	public string Trigger { get; set; } = string.Empty;

	/// <summary>
	/// The intro animation name.
	/// Leave blank for no intro animation.
	/// </summary>
	[Parameter]
	public string Intro { get; set; } = "none";

	/// <summary>
	/// The intro animation trigger.
	/// Accepts 'none', 'auto', 'hover', 'click'.
	/// Can mix them as 'auto-hover-click'.
	/// Defaults to 'auto'.
	/// </summary>
	[Parameter]
	public string IntroTrigger { get; set; } = "auto";

	/// <summary>
	/// The outro animation name.
	/// Leave blank for no outro animation.
	/// </summary>
	[Parameter]
	public string Outro { get; set; } = "none";

	/// <summary>
	/// The outro animation trigger.
	/// Accepts 'none', 'auto', 'hover', 'click'.
	/// Can mix them as 'auto-hover-click'.
	/// Defaults to 'none'.
	/// </summary>
	[Parameter]
	public string OutroTrigger { get; set; } = "none";

	/// <summary>
	/// The number of repeats for the 'loop' and 'looprang' animations.
	/// Defaults to 0 (infinite repeats).
	/// </summary>
	[Parameter]
	public int Repeats { get; set; } = 0;

	/// <summary>
	/// The delay (in milliseconds).
	/// Only affects intro and outro animations.
	/// </summary>
	[Parameter]
	public int Delay { get; set; } = 0;

	/// <summary>
	/// The wait time (in milliseconds).
	/// Only affects other states and morphs animations.
	/// </summary>
	[Parameter]
	public int Wait { get; set; } = 0;

	/// <summary>
	/// Loading type of the animation.
	/// Accepts: "lazy" or "interaction".
	/// Defaults to "lazy".
	/// </summary>
	[Parameter]
	public string Loading { get; set; } = "lazy";

	/// <summary>
	/// Stroke type (line weight) of the icon.
	/// Accepts: "light", "regular" or "bold".
	/// Defaults to "regular".
	/// </summary>
	[Parameter]
	public string Stroke { get; set; } = "regular";

	/// <summary>
	/// Sets the icon size via style tag.
	/// Example: "96px" (default).
	/// </summary>
	[Parameter]
	public string Size { get; set; } = "96px";

	/// <summary>
	/// Sets the animation target element for the trigger.
	/// It's a name of a css class like '.default'.
	/// Defaults to icon itself.
	/// </summary>
	[Parameter]
	public string Target { get; set; } = string.Empty;

	/// <summary>
	/// Sets the 'title' of the icon element.
	/// </summary>
	[Parameter]
	public string Title { get; set; } = string.Empty;

	/// <summary>
	/// Sets the 'id' of the icon element.
	/// </summary>
	[Parameter]
	public string Id { get; set; } = string.Empty;

	protected override void OnInitialized() {

		if (Morph == "none") {
			Morph = State;
		}

		if (Anim == string.Empty) {
			Anim = State != string.Empty ? "state" : Anim;
			Morph = Morph != string.Empty ? "morph" : Morph;
		}

		if (Trigger == string.Empty) {
			State = State != string.Empty ? "click" : State;
			Morph = Morph != string.Empty ? "hover" : Morph;
		}

	}

}