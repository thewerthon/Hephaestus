@using Radzen.Blazor.Rendering
@inject IJSRuntime JSRuntime

<RadzenButton @ref=button Variant="Variant.Text" class="topbar-icon" title="Mudar Tema" Click="@(args => popup.ToggleAsync(button.Element))">
	<LordIcon Icon="/system/solid/bulb.json" Trigger="click" State="morph-bulb-OFF" Size="24px" Target=".rz-button" Title="Alterar Tema" />
</RadzenButton>

<Popup @ref=popup Lazy=true class="popup-frame">

	<RadzenStack Gap="6px" class="rz-p-2">

		<RadzenButton Variant="Variant.Text" Click="@(() => SetTheme("auto"))" Style="text-align:start" class="rz-px-2" title="Exibir de acordo com o tema do dispositivo.">
			<RadzenIcon Icon="brightness_4" Style="font-size:24px" />
			<RadzenText Text="Automático" TextStyle="TextStyle.Button" class="rz-m-0 rz-ml-2" />
		</RadzenButton>

		<RadzenButton Variant="Variant.Text" Click="@(() => SetTheme("light"))" Style="text-align:start" class="rz-px-2" title="Exibir sempre no tema claro.">
			<RadzenIcon Icon="brightness_high" Style="font-size:24px" />
			<RadzenText Text="Modo Claro" TextStyle="TextStyle.Button" class="rz-m-0 rz-ml-2" />
		</RadzenButton>

		<RadzenButton Variant="Variant.Text" Click="@(() => SetTheme("dark"))" Style="text-align:start" class="rz-px-2" title="Exibir sempre no tema escuro.">
			<RadzenIcon Icon="mode_night" Style="font-size:24px" />
			<RadzenText Text="Modo Escuro" TextStyle="TextStyle.Button" class="rz-m-0 rz-ml-2" />
		</RadzenButton>

	</RadzenStack>

</Popup>

@code {

	RadzenButton? button;
	Popup? popup;

	private async Task SetTheme(string theme) {
		await JSRuntime.InvokeVoidAsync("setTheme", theme);
	}

}
