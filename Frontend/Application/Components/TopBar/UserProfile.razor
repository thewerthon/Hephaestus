@using System.Security.Claims
@inject IHttpClientFactory ClientFactory

<RadzenProfileMenu Click="@ProfileMenuClick" class="rz-p-2">

	<!-- Profile Info -->
	<Template>
		<RadzenStack Orientation="Orientation.Horizontal" Gap="10px" class="rz-mr-2" title="@AppText["0035"]">
			<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
				<RadzenStack Style="width:38px; height:38px; position:absolute; background:#ffffff77;" Visible="@(!visible)" class="rounded-circle" />
				<RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Light" Size="ProgressBarCircularSize.ExtraSmall" Value="100" Visible="@(!visible)" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width:24px; height:24px; position:absolute; background:#ffffff00;" class="rounded-circle" />
				<RadzenImage Path="@cUser.Photo" Style="width:38px;height:38px" class="user-size rounded-circle" />
			</RadzenStack>
			<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="0px" class="small-none">
				<RadzenText Text="@cUser.Name" TextStyle="TextStyle.Body1" class="rz-mb-0 rz-text-nowrap" style="color:var(--rz-text-primary-color);font-size:14px"></RadzenText>
				<RadzenText Text="@cUser.Role" TextStyle="TextStyle.Caption" class="rz-my-0 rz-text-nowrap" style="color:var(--rz-text-tertiary-color);font-size:11px"></RadzenText>
			</RadzenStack>
		</RadzenStack>
	</Template>

	<!-- Menu Items -->
	<ChildContent>
		<RadzenProfileMenuItem Text="@AppText["0024"]" Icon="@AppIcon["0600"]" Path="@AppPath["0600"]" />
		<RadzenProfileMenuItem Text="@AppText["0025"]" Icon="@AppIcon["0500"]" Path="@AppPath["0500"]" />
		<RadzenProfileMenuItem Text="@AppText["0026"]" Icon="@AppIcon["0800"]" Value="AppInstall" Style="display:none" id="app-install" />
		<RadzenProfileMenuItem Text="@AppText["0027"]" Icon="@AppIcon["0700"]" Value="Update" />
		<RadzenProfileMenuItem Text="@AppText["0028"]" Icon="@AppIcon["0050"]" Path="@AppPath["0050"]" />
		<RadzenProfileMenuItem Text="@AppText["0029"]" Icon="@AppIcon["0400"]" Path="@AppPath["0400"]" />
		<RadzenProfileMenuItem Text="@AppText["0030"]" Icon="@AppIcon["0900"]" Value="Logout" />
	</ChildContent>

</RadzenProfileMenu>

@code {

	[CascadingParameter]
	public Task<AuthenticationState>? AuthTask { get; set; }
	private ClaimsPrincipal? user;
	private UserInfo? cUser;
	private UserInfo? sUser;
	private byte[]? photo;
	private bool visible;

	protected override async Task OnInitializedAsync() {

		var authState = await AuthTask;
		this.user = authState.User;
		this.cUser = new UserInfo() { Name = AppText["0033"], Role = AppText["0034"], Photo = "images/users/unknown.jpg" };
		this.sUser = new UserInfo() { Name = AppText["0033"], Role = AppText["0034"], Photo = "images/users/unknown.jpg" };

		if (user is not null && user.Identity.IsAuthenticated) {

			cUser.Email = user.FindFirst("email")?.Value;
			var sUser = await LocalStorage.GetItemAsync<UserInfo>("UserInfo");

			if (cUser?.Email == sUser?.Email) {

				cUser = sUser;
				visible = true;

			} else {

				var client = ClientFactory.CreateClient("GraphAPI");
				cUser = await client.GetFromJsonAsync<UserInfo>("v1.0/me");
				photo = await client.GetByteArrayAsync("v1.0/me/photos/96x96/$value");

				cUser.Role = user.FindFirst("role")?.Value ?? "System.User";
				cUser.Photo = "data:image/jpeg;base64," + Convert.ToBase64String(photo);
				cUser.Role = AppRole[cUser.Role.Replace(".", "")];

				await LocalStorage.SetItemAsync<UserInfo>("UserInfo", cUser);
				visible = true;

			}

		}

	}

	protected override Task OnAfterRenderAsync(bool firstRender) {

		if (firstRender) _ = JSRuntime.InvokeVoidAsync("isAppInstalled");
		return base.OnAfterRenderAsync(firstRender);

	}

	protected async void ProfileMenuClick(RadzenProfileMenuItem args) {

		if (args.Value == "AppInstall") {
			await AppInstall();
		}

		if (args.Value == "Logout") {
			await LogoutConfirm();
		}

		if (args.Value == "Update") {
			await ForceUpdate();
		}

	}

	private async Task AppInstall() {

		await JSRuntime.InvokeVoidAsync("appInstall");

	}

	private async Task ForceUpdate() {

		var result = await DialogService.Confirm(AppText["0031"], AppText["0027"], new ConfirmOptions() {
				OkButtonText = AppButton["Confirm"],
				CancelButtonText = AppButton["Cancel"],
				AutoFocusFirstElement = false,
				CloseDialogOnOverlayClick = true,
				CloseDialogOnEsc = true
			});

		if (result ?? false) {
			await JSRuntime.InvokeVoidAsync("update");
		}

	}

	private async Task LogoutConfirm() {

		var result = await DialogService.Confirm(AppText["0032"], AppText["0030"], new ConfirmOptions() {
				OkButtonText = AppButton["Confirm"],
				CancelButtonText = AppButton["Cancel"],
				AutoFocusFirstElement = false,
				CloseDialogOnOverlayClick = true,
				CloseDialogOnEsc = true
			});

		if (result ?? false) {
			await LocalStorage.RemoveItemAsync("UserInfo");
			NavigationManager.NavigateToLogout("authentication/logout");
		}

	}

}