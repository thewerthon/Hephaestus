@page "/"
@page "/inicio"
@page "/home"

@implements IDisposable
@namespace Hephaestus.Frontend.Application.Pages

<PageNavigation Code="0100" Title="@($"{AppTexts[VariablesService.SaudationCode()]}, {UserService.CurrentUser.FirstName}.")" Subtitle="@AppTexts["0054"]" Favoritable="false">

	<FeatureAlert />

	@{

		var favmodules = UserService.Preferences.FavoriteModules ?? string.Empty;
		var favfunctions = UserService.Preferences.FavoriteFunctions ?? string.Empty;

		if (!String.IsNullOrEmpty(favmodules) || !String.IsNullOrEmpty(favfunctions)) {

			if (!String.IsNullOrEmpty(favmodules)) {

				<PageNavigationGroup Text="@AppTexts["0068"]">
					<div class="favmodules-container">
						@foreach (var favorite in favmodules.Split(" ")) {
							<PageNavigationItem Code="@favorite" IsModuleButton="true" Callback="FavoritesRefresh" />
						}
					</div>
				</PageNavigationGroup>

			}

			if (!String.IsNullOrEmpty(favfunctions)) {

				<PageNavigationGroup Text="@AppTexts["0077"]">
					<div class="favfunctions-container">
						@foreach (var favorite in favfunctions.Split(" ")) {
							<PageNavigationItem Code="@favorite" Callback="FavoritesRefresh" />
						}
					</div>
				</PageNavigationGroup>

			}

		} else {

			<PageNavigationGroup Text="@AppTexts["0076"]" Style="width: 820px">
				<PageNavigationItemBlank />
				<PageNavigationItemBlank />
				<PageNavigationItemBlank />
				<PageNavigationItemBlank Class="desktop-only" />
				<PageNavigationItemBlank Class="desktop-only" />
				<PageNavigationItemBlank Class="desktop-only" />
			</PageNavigationGroup>

		}

	}

</PageNavigation>

@code {

	protected override void OnAfterRender(bool firstRender) {

		if (firstRender) EnableFavoritesSorting();

	}

	private void EnableFavoritesSorting() {

		JSRuntime.InvokeVoidAsync("enableFavoritesSorting", "favmodules-container");
		JSRuntime.InvokeVoidAsync("enableFavoritesSorting", "favfunctions-container");

	}

	public static event EventHandler<(string modules, string functions)>? FavoritesReorder;
	protected override void OnInitialized() { FavoritesReorder += OnFavoritesReorder!; }
	public void Dispose() { FavoritesReorder -= OnFavoritesReorder!; }

	[JSInvokable]
	public static void TriggerFavoritesReorder(string modules, string functions) {

		FavoritesReorder?.Invoke(null, (modules, functions));

	}

	private void OnFavoritesReorder(object sender, (string modules, string functions) args) {

		_ = UserService.SetFavoritesOrderAsync(args.modules, args.functions, true);

	}

	private void FavoritesRefresh() {

		StateHasChanged();
		EnableFavoritesSorting();

	}

}