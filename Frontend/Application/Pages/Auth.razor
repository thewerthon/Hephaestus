@page "/authentication/{action}"
@layout LoginLayout
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject ISessionStorageService SessionStorage

<PageTitle>Login</PageTitle>
<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="LoginSuccessHandler">

	<LoggingIn>
		<p>Iniciando Login...</p>
	</LoggingIn>

	<CompletingLoggingIn>
		<p>Finalizando Login...</p>
	</CompletingLoggingIn>

	<LogInFailed>
		<RadzenButton Text="Tentar Novamente" Click="@DoLogin" />
		<p style="padding-top:10px">Processo de login falhou.</p>
	</LogInFailed>

	<LogOut>
		<p>Iniciando Logout...</p>
	</LogOut>

	<CompletingLogOut>
		<p>Finalizando Logout...</p>
	</CompletingLogOut>

	<LogOutFailed>
		<RadzenButton Text="Retornar ao Início" Click="@DoLogin" />
		<p style="padding-top:10px">Processo de logout falhou.</p>
	</LogOutFailed>

	<LogOutSucceeded>
		<RadzenButton Text="Novo Login" Click="@DoLogin" />
		<p style="padding-top:10px">Você saiu da sua conta.</p>
	</LogOutSucceeded>

</RemoteAuthenticatorView>

@code {

	[Parameter]
	public string? Action { get; set; }
	private string returnPath = string.Empty;

	protected override async Task OnInitializedAsync() {
		returnPath = await SessionStorage.GetItemAsStringAsync("ReturnPath") ?? "inicio";
	}

	private void LoginSuccessHandler(RemoteAuthenticationState state) {
		state.ReturnUrl = returnPath;
	}

	private void DoLogin() {
		NavigationManager.NavigateToLogin("authentication/login");
	}

}