@page "/users"
@namespace Hephaestus.Frontend.Application.Pages

<PageTitle>Users</PageTitle>


<RadzenStack>
	<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceAround">
		<RadzenColumn>
			<RadzenText Text="Usuários Cadastrados" TextStyle="TextStyle.H5" TagName="TagName.H5" style="margin: 0" />
		</RadzenColumn>
		<RadzenColumn>
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
				<RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
			</RadzenStack>
		</RadzenColumn>
	</RadzenRow>
	<RadzenRow>
		<RadzenColumn SizeMD=12>
			<RadzenDataGrid @ref="grid" Data="@users" Count="@count"
											LoadData="@GridLoadData" TItem="User"
											AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowColumnPicking="true" AllowColumnReorder="true" AllowColumnResize="true" AllowGrouping="true"
											AllowRowSelectOnRowClick="true" Responsive="false" ShowCellDataAsTooltip="true" ShowColumnTitleAsTooltip="true" ShowMultiColumnSortingIndex="true" AllowMultiColumnSorting="true"
											AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PagerAlwaysVisible="true" PageSizeOptions=@(new int[]{10, 20, 50, 100})
											RowDoubleClick="@EditRow">
				<Columns>
					<RadzenDataGridColumn TItem="User" Property="Photo" Title="Photo" Filterable="false" Sortable="false" Resizable="false" Reorderable="false" Pickable="false" Groupable="false" MinWidth="64px" Width="64px" TextAlign="TextAlign.Center" Visible="true">
						<Template Context="user">
							<RadzenImage Path="@user.Photo" Style="width:32px;height:32px" class="rounded-circle" />
						</Template>
					</RadzenDataGridColumn>
					<RadzenDataGridColumn TItem="User" Property="Id" Title="Id" Visible="false" />
					<RadzenDataGridColumn TItem="User" Property="Name" Title="Name" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Office" Title="Office" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Title" Title="Title" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Email" Title="Email" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Role" Title="Role" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property=@AppFields["HiddenDataName"] Title="Hidden" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property=@AppFields["ActiveDataName"] Title="Active" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Preferences.ThemeData.Name" Title="Theme" Visible="true" />
					<RadzenDataGridColumn TItem="User" Property="Preferences.LanguageData.Name" Title="Language" Visible="true" />
				</Columns>

			</RadzenDataGrid>
		</RadzenColumn>
	</RadzenRow>
</RadzenStack>

@code {

	protected int count;
	protected IEnumerable<User>? users;
	protected RadzenDataGrid<User>? grid;

	protected async Task GridLoadData(LoadDataArgs args) {

		try {

			var result = await DatabaseService.GetItemsAsync<User>(table: "users", expand: "hiddendata,activedata,preferences(expand=themedata,languagedata)", filter: $"{args.Filter}", orderby: $"{args.OrderBy}", top: args.Top, skip: args.Skip, count: args.Top != null && args.Skip != null);
			users = result.Value.AsODataEnumerable();
			count = result.Count;

		} catch (Exception) {

			NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Error", Detail = $"Unable to load Users" });

		}

	}

	protected async Task AddButtonClick(MouseEventArgs args) {

		//await DialogService.OpenAsync<AddUser>("Add User", null);
		if (grid is not null) await grid.Reload();

	}

	protected async Task EditRow(DataGridRowMouseEventArgs<User> args) {

		//await DialogService.OpenAsync<EditUser>("Edit User", new Dictionary<string, object> { { "Id", args.Data.Id } });
		if (grid is not null) await grid.Reload();

	}

	protected async Task GridDeleteButtonClick(MouseEventArgs args, User user) {

		try {

			if (await DialogService.Confirm("Are you sure you want to delete this record?") == true) {

				//var result = await DatabaseService.DeleteUserAsync(id: user.Id);
				//if (result != null) await grid.Reload();
				if (grid is not null) await grid.Reload();

			}

		} catch (Exception) {

			NotificationService.Notify(new NotificationMessage {
					Severity = NotificationSeverity.Error,
					Summary = $"Error",
					Detail = $"Unable to delete User"
				});

		}

	}

}