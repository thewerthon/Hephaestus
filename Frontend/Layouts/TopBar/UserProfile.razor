@namespace Hephaestus.Frontend.Application.Layouts.TopBar
@inherits Microsoft.AspNetCore.Components.ComponentBase

<RadzenProfileMenu Click="@ProfileMenuClick" ContextMenu="@(args => None())" class="rz-p-2">

	<!-- Profile Info -->
	<Template>
		<RadzenStack Orientation="Orientation.Horizontal" Gap="10px" class="rz-mr-2" title="@AppTexts["0035"]">
			<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
				<RadzenImage Path="@Photo" Style="width:38px;height:38px" class="user-size rounded-circle" />
			</RadzenStack>
			<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="0px" class="small-none">
				<RadzenText Text="@Name" TextStyle="TextStyle.Body1" class="rz-mb-0 rz-text-nowrap" style="color:var(--rz-text-primary-color);font-size:14px"></RadzenText>
				<RadzenText Text="@Role" TextStyle="TextStyle.Caption" class="rz-my-0 rz-text-nowrap" style="color:var(--rz-text-tertiary-color);font-size:11px"></RadzenText>
			</RadzenStack>
		</RadzenStack>
	</Template>

	<!-- Menu Items -->
	<ChildContent>
		<RadzenProfileMenuItem Text="@AppNames["0010"]" Icon="@MenuIcons["0010"]" Value="Profile" Path="@AppPaths["0010"]" />
		<hr />
		<RadzenProfileMenuItem Text="@AppNames["0003"]" Icon="@MenuIcons["0003"]" Value="Changelog" Path="@AppPaths["0003"]" />
		<RadzenProfileMenuItem Text="@AppNames["0004"]" Icon="@MenuIcons["0004"]" Value="Install" Style="display:none" id="app-install" />
		<RadzenProfileMenuItem Text="@AppNames["0005"]" Icon="@MenuIcons["0005"]" Value="Update" />
		<hr />
		<RadzenProfileMenuItem Text="@AppNames["0001"]" Icon="@MenuIcons["0001"]" Value="About" Path="@AppPaths["0001"]" />
		<RadzenProfileMenuItem Text="@AppNames["0013"]" Icon="@MenuIcons["0013"]" Value="Help" Path="@AppPaths["0013"]" />
		<RadzenProfileMenuItem Text="@AppNames["0009"]" Icon="@MenuIcons["0009"]" Value="Logout" />
	</ChildContent>

</RadzenProfileMenu>

@code {

	private string Name = string.Empty;
	private string Role = string.Empty;
	private string Photo = string.Empty;

	protected override void OnInitialized() {

		Name = UserService.CurrentUser.Name ?? AppTexts["0033"];
		Role = UserService.CurrentUser.Role ?? AppTexts["0034"];
		Role = AppRoles[(UserService.CurrentUser.Role ?? "System.User").Replace(".", string.Empty)];
		Photo = UserService.CurrentUser.Photo ?? "images/users/unknown.jpg";

	}

	protected override async Task OnAfterRenderAsync(bool firstRender) {

		if (firstRender) {

			await JSRuntime.InvokeVoidAsync("isAppInstalled");

			if (!UserService.Initialized) {
				await UserService.FecthUserAsync();
				await UserService.FecthPreferencesAsync();
			}

			Name = UserService.CurrentUser.Name ?? AppTexts["0033"];
			Role = AppRoles[(UserService.CurrentUser.Role ?? "System.User").Replace(".", string.Empty)];
			Photo = UserService.CurrentUser.Photo ?? "images/users/unknown.jpg";
			StateHasChanged();

			await UsageLogService.LogLoginAsync();

		}

	}

	protected async void ProfileMenuClick(RadzenProfileMenuItem args) {

		if (args.Value == "Install") await AppInstall();
		if (args.Value == "Update") await ForceUpdate();
		if (args.Value == "Logout") await LogoutConfirm();

	}

	private async Task AppInstall() {

		await JSRuntime.InvokeVoidAsync("appInstall");

	}

	private async Task ForceUpdate() {

		var result = await DialogService.Confirm(AppTexts["0031"], AppTexts["0027"], new ConfirmOptions() {
				OkButtonText = AppButtons["Confirm"],
				CancelButtonText = AppButtons["Cancel"],
				AutoFocusFirstElement = false,
				CloseDialogOnOverlayClick = true,
				CloseDialogOnEsc = true
			});

		if (result ?? false) {
			await LocalStorage.ClearAsync();
			await SessionStorage.ClearAsync();
			await JSRuntime.InvokeVoidAsync("update");
		}

	}

	private async Task LogoutConfirm() {

		var result = await DialogService.Confirm(AppTexts["0032"], AppTexts["0030"], new ConfirmOptions() {
				OkButtonText = AppButtons["Confirm"],
				CancelButtonText = AppButtons["Cancel"],
				AutoFocusFirstElement = false,
				CloseDialogOnOverlayClick = true,
				CloseDialogOnEsc = true
			});

		if (result ?? false) {
			NavigationManager.NavigateToLogout("authentication/logout");
		}

	}

	private void None() { }

}