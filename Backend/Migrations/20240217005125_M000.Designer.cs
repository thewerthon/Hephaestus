// <auto-generated />
using System;
using Hephaestus.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240217005125_M000")]
    partial class M000
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hephaestus.Architect.Models.Active", b =>
                {
                    b.Property<bool>("Id")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name_en")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name_es")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Active", (string)null);

                    b.HasData(
                        new
                        {
                            Id = true,
                            Name = "Sim",
                            Name_en = "Yes",
                            Name_es = "Sí"
                        },
                        new
                        {
                            Id = false,
                            Name = "Não",
                            Name_en = "No",
                            Name_es = "No"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Hidden", b =>
                {
                    b.Property<bool>("Id")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name_en")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name_es")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Hidden", (string)null);

                    b.HasData(
                        new
                        {
                            Id = true,
                            Name = "Sim",
                            Name_en = "Yes",
                            Name_es = "Sí"
                        },
                        new
                        {
                            Id = false,
                            Name = "Não",
                            Name_en = "No",
                            Name_es = "No"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Language", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name_en")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name_es")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Key");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "pt",
                            Name = "Português (BR)",
                            Name_en = "Portuguese (BR)",
                            Name_es = "Portugués (BR)"
                        },
                        new
                        {
                            Key = "en",
                            Name = "Inglês (EUA)",
                            Name_en = "English (US)",
                            Name_es = "Inglés (EUA)"
                        },
                        new
                        {
                            Key = "es",
                            Name = "Espanhol (ES)",
                            Name_en = "Spanish (SP)",
                            Name_es = "Español (ES)"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Preferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Theme")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Language");

                    b.HasIndex("Theme");

                    b.HasIndex("User")
                        .IsUnique();

                    b.ToTable("Preferences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "pt",
                            Theme = "auto",
                            User = 1
                        },
                        new
                        {
                            Id = 2,
                            Language = "pt",
                            Theme = "auto",
                            User = 2
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Role", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Name_en")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Name_es")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Key");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "System.Admin",
                            Name = "Administrador",
                            Name_en = "Administrator",
                            Name_es = "Administrador"
                        },
                        new
                        {
                            Key = "System.Member",
                            Name = "Moderador",
                            Name_en = "Moderator",
                            Name_es = "Moderador"
                        },
                        new
                        {
                            Key = "System.User",
                            Name = "Usuário Padrão",
                            Name_en = "System User",
                            Name_es = "Usuario Estándar"
                        },
                        new
                        {
                            Key = "Engineering.Admin",
                            Name = "Engenharia (Gestão)",
                            Name_en = "Engineering (Manager)",
                            Name_es = "Ingeniería (Gerente)"
                        },
                        new
                        {
                            Key = "Engineering.Member",
                            Name = "Engenharia (Membro)",
                            Name_en = "Engineering (Member)",
                            Name_es = "Ingeniería (Miembro)"
                        },
                        new
                        {
                            Key = "Engineering.User",
                            Name = "Engenharia (Usuário)",
                            Name_en = "Engineering (User)",
                            Name_es = "Ingeniería (Usuario)"
                        },
                        new
                        {
                            Key = "Fiscal.Admin",
                            Name = "Fiscal (Gestão)",
                            Name_en = "Fiscal (Manager)",
                            Name_es = "Fiscal (Gerente)"
                        },
                        new
                        {
                            Key = "Fiscal.Member",
                            Name = "Fiscal (Membro)",
                            Name_en = "Fiscal (Member)",
                            Name_es = "Fiscal (Miembro)"
                        },
                        new
                        {
                            Key = "Fiscal.User",
                            Name = "Fiscal (Usuário)",
                            Name_en = "Fiscal (User)",
                            Name_es = "Fiscal (Usuario)"
                        },
                        new
                        {
                            Key = "Logistics.Admin",
                            Name = "Logística (Gestão)",
                            Name_en = "Logistics (Manager)",
                            Name_es = "Logística (Gerente)"
                        },
                        new
                        {
                            Key = "Logistics.Member",
                            Name = "Logística (Membro)",
                            Name_en = "Logistics (Member)",
                            Name_es = "Logística (Miembro)"
                        },
                        new
                        {
                            Key = "Logistics.User",
                            Name = "Logística (Usuário)",
                            Name_en = "Logistics (User)",
                            Name_es = "Logística (Usuario)"
                        },
                        new
                        {
                            Key = "Maintenance.Admin",
                            Name = "Manutenção (Gestão)",
                            Name_en = "Maintenance (Manager)",
                            Name_es = "Mantenimiento (Gerente)"
                        },
                        new
                        {
                            Key = "Maintenance.Member",
                            Name = "Manutenção (Membro)",
                            Name_en = "Maintenance (Member)",
                            Name_es = "Mantenimiento (Miembro)"
                        },
                        new
                        {
                            Key = "Maintenance.User",
                            Name = "Manutenção (Usuário)",
                            Name_en = "Maintenance (User)",
                            Name_es = "Mantenimiento (Usuario)"
                        },
                        new
                        {
                            Key = "Planning.Admin",
                            Name = "Planejamento (Gestão)",
                            Name_en = "Planning (Manager)",
                            Name_es = "Planificación (Gerente)"
                        },
                        new
                        {
                            Key = "Planning.Member",
                            Name = "Planejamento (Membro)",
                            Name_en = "Planning (Member)",
                            Name_es = "Planificación (Miembro)"
                        },
                        new
                        {
                            Key = "Planning.User",
                            Name = "Planejamento (Usuário)",
                            Name_en = "Planning (User)",
                            Name_es = "Planificación (Usuario)"
                        },
                        new
                        {
                            Key = "Production.Admin",
                            Name = "Produção (Gestão)",
                            Name_en = "Production (Manager)",
                            Name_es = "Producción (Gerente)"
                        },
                        new
                        {
                            Key = "Production.Member",
                            Name = "Produção (Membro)",
                            Name_en = "Production (Member)",
                            Name_es = "Producción (Miembro)"
                        },
                        new
                        {
                            Key = "Production.User",
                            Name = "Produção (Usuário)",
                            Name_en = "Production (User)",
                            Name_es = "Producción (Usuario)"
                        },
                        new
                        {
                            Key = "Quality.Admin",
                            Name = "Qualidade (Gestão)",
                            Name_en = "Quality (Manager)",
                            Name_es = "Calidad (Gerente)"
                        },
                        new
                        {
                            Key = "Quality.Member",
                            Name = "Qualidade (Membro)",
                            Name_en = "Quality (Member)",
                            Name_es = "Calidad (Miembro)"
                        },
                        new
                        {
                            Key = "Quality.User",
                            Name = "Qualidade (Usuário)",
                            Name_en = "Quality (User)",
                            Name_es = "Calidad (Usuario)"
                        },
                        new
                        {
                            Key = "Safety.Admin",
                            Name = "Segurança (Gestão)",
                            Name_en = "Safety (Manager)",
                            Name_es = "Seguridad (Gerente)"
                        },
                        new
                        {
                            Key = "Safety.Member",
                            Name = "Segurança (Membro)",
                            Name_en = "Safety (Member)",
                            Name_es = "Seguridad (Miembro)"
                        },
                        new
                        {
                            Key = "Safety.User",
                            Name = "Segurança (Usuário)",
                            Name_en = "Safety (User)",
                            Name_es = "Seguridad (Usuario)"
                        },
                        new
                        {
                            Key = "Warehouse.Admin",
                            Name = "Almoxarifado (Gestão)",
                            Name_en = "Warehouse (Manager)",
                            Name_es = "Almacén (Gerente)"
                        },
                        new
                        {
                            Key = "Warehouse.Member",
                            Name = "Almoxarifado (Membro)",
                            Name_en = "Warehouse (Member)",
                            Name_es = "Almacén (Miembro)"
                        },
                        new
                        {
                            Key = "Warehouse.User",
                            Name = "Almoxarifado (Usuário)",
                            Name_en = "Warehouse (User)",
                            Name_es = "Almacén (Usuario)"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Theme", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name_en")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name_es")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Key");

                    b.ToTable("Themes", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "auto",
                            Name = "Automático",
                            Name_en = "Automatic",
                            Name_es = "Automático"
                        },
                        new
                        {
                            Key = "light",
                            Name = "Tema Claro",
                            Name_en = "Light Theme",
                            Name_es = "Tema Claro"
                        },
                        new
                        {
                            Key = "dark",
                            Name = "Tema Escuro",
                            Name_en = "Dark Theme",
                            Name_es = "Tema Oscuro"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Country")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Hidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Office")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Hidden");

                    b.HasIndex("Role");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Email = "system@siw.ind.br",
                            Guid = "00000000-0000-0000-0000-000000000000",
                            Hidden = true,
                            Name = "Sistema",
                            Photo = "images/users/unknown.jpg",
                            Role = "System.Admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Email = "autobot@siw.ind.br",
                            Guid = "8c4e35a5-2f64-4c28-8644-672f037272c5",
                            Hidden = true,
                            Name = "Autobot",
                            Photo = "images/users/unknown.jpg",
                            Role = "System.Admin"
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Version", b =>
                {
                    b.Property<int>("Build")
                        .HasColumnType("int");

                    b.Property<int>("Force")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Build");

                    b.HasIndex("Build")
                        .IsUnique();

                    b.HasIndex("Force");

                    b.ToTable("Versions", (string)null);

                    b.HasData(
                        new
                        {
                            Build = 3,
                            Force = 3,
                            Name = "v2.0.0 (Alpha 3)",
                            Notes = ""
                        });
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.Preferences", b =>
                {
                    b.HasOne("Hephaestus.Architect.Models.Language", "LanguageData")
                        .WithMany()
                        .HasForeignKey("Language");

                    b.HasOne("Hephaestus.Architect.Models.Theme", "ThemeData")
                        .WithMany()
                        .HasForeignKey("Theme");

                    b.HasOne("Hephaestus.Architect.Models.User", "UserData")
                        .WithOne("Preferences")
                        .HasForeignKey("Hephaestus.Architect.Models.Preferences", "User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageData");

                    b.Navigation("ThemeData");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.User", b =>
                {
                    b.HasOne("Hephaestus.Architect.Models.Active", "ActiveData")
                        .WithMany()
                        .HasForeignKey("Active")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hephaestus.Architect.Models.User", "CreatedByData")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Hephaestus.Architect.Models.User", "DeletedByData")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Hephaestus.Architect.Models.Hidden", "HiddenData")
                        .WithMany()
                        .HasForeignKey("Hidden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hephaestus.Architect.Models.Role", "RoleData")
                        .WithMany()
                        .HasForeignKey("Role");

                    b.HasOne("Hephaestus.Architect.Models.User", "UpdatedByData")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("ActiveData");

                    b.Navigation("CreatedByData");

                    b.Navigation("DeletedByData");

                    b.Navigation("HiddenData");

                    b.Navigation("RoleData");

                    b.Navigation("UpdatedByData");
                });

            modelBuilder.Entity("Hephaestus.Architect.Models.User", b =>
                {
                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
